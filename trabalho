Arquivo: 
Conjunto de dados ao qual você dá um nome. É uma sequencias binária, 0101010... 

Arquivo de texto: 
No caso dos arquivos de texto, a cada sequencia de 8 binários, é uma letra gerada ao arquivo de texto. Os arquivos de texto permitem que os sistemas se comuniquem. 

Variável: 
Um nome que recebe um valor, que simultaneamente é um espaço na memória. 

Servidor: 
É um sistema computacional, físico ou virtual, composto por hardware e software, dedicado a atender solicitações e prestar serviços para outros dispositivos como computadores 

------------------------------------------------------------------------------------------------------------------------------------------

NOVO TRABALHO 

A. A LGPD estabelece uma série de requisitos e obrigações para o tratamento de dados pessoais, incluindo coleta, armazenamento, processamento e compartilhamento dessas informações.
Isso se aplica a todas as organizações, públicas ou privadas, que realizam atividades de tratamento de dados no Brasil, independentemente de onde os dados estão localizados.
Os data centers, como infraestruturas críticas para o armazenamento e processamento de dados, devem garantir que estão em conformidade com as disposições da LGPD.
Isso inclui implementar medidas de segurança adequadas para proteger os dados pessoais contra acesso não autorizado, uso indevido, perda ou roubo.

B.  Alguns Formatos de arquivos de dados proprietários e abertos são: CSV, JSON e XML. 

------------------------------------------------------------------------------------------------------------------------------------------------

NOVO TRABALHO - 28/02/2024

1- Python, JavaScript e C++, suas diferenças de acordo com alguns critérios. 

Sintaxe:

Python: Sintaxe limpa e minimalista, enfatiza a legibilidade do código.
JavaScript: Sintaxe flexível, permite programação procedural, orientada a objetos e funcional.
C++: Sintaxe mais complexa em comparação com Python e JavaScript, exige a declaração de tipos de dados e gerenciamento de memória.

Tipagem:

Python: Linguagem de tipagem dinâmica, onde os tipos de dados são inferidos em tempo de execução.
JavaScript: Também é tipagem dinâmica, mas possui tipos primitivos e objetos.
C++: Linguagem de tipagem estática, onde os tipos de dados são declarados explicitamente em tempo de compilação.

Gerenciamento de Memória:

Python: Usa um coletor de lixo para gerenciar automaticamente a alocação e desalocação de memória.
JavaScript: Também utiliza coleta de lixo, mas o processo pode ser menos previsível devido ao comportamento do navegador ou do mecanismo JavaScript.
C++: O programador é responsável por alocar e desalocar memória explicitamente, o que pode levar a problemas como vazamentos de memória se não for feito corretamente.

Paradigma de Programação:

Python: Suporta programação procedural, orientada a objetos e funcional.
JavaScript: Também suporta programação procedural, orientada a objetos e funcional.
C++: Permite programação procedural, orientada a objetos e genérica.

Portabilidade:

Python: Altamente portável, sendo executável em várias plataformas sem alterações significativas.
JavaScript: Pode ser executado em qualquer navegador da web e também em servidores usando o Node.js.
C++: Portabilidade depende do compilador e sistema operacional, mas é amplamente suportada em várias plataformas.

Desempenho:

Python: Geralmente mais lento em comparação com JavaScript e C++ devido à natureza interpretada e tipagem dinâmica.
JavaScript: Mais rápido que Python devido à execução just-in-time em motores JavaScript modernos.
C++: Altamente otimizado e geralmente mais rápido que Python e JavaScript devido à sua natureza compilada e tipagem estática.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

I- Python - Linguagem de programação conhecida por uma sintesi simples e legivel, sendo acessivel a iniciantes. Aderido em 
uma diversidade de domínios como: análise de dados, automação de tarefas e inteligencia artificial. Sua vasta biblioteca 
padrão e grande comunidade de desenvolvedores contribuem para popularidade e versatilidade.

Código:
# Solicita ao usuário que insira seu nome
nome = input("Digite seu nome: ")

# Saudação
print("Olá, " + nome + "! Bem-vindo ao Python!")


II- Ruby - Linguagem de programação de alto nível, com uma sintaxe simples e expressiva, orientada a objetos e de tipagem
dinâmica, tudo se torna semelhante a um objeto. Oferece estruturas convenientes por exemplo ARRAYS e HASHES além de suportar
blocos e iteradores. O ruby permite inclusão de funcionalidades em classes promovendo a reutilização de código de maneira 
eficiente. Além disso possui sistema robusto na forma controlada de se lidar com erros, tornando-a popular à aplicativos.

Código:
# Solicita ao usuário que insira seu nome
print "Digite seu nome: "
nome = gets.chomp

# Saudação
puts "Olá, #{nome}! Bem-vindo ao Ruby!"



III- JavaScript- Linguagem de programa amplamente utilizada no desenvolvimento web para tornar as páginas interativas e
dinâmicas. Este permite manipular elementos da página, responder a eventos do usuário e
enviar solicitações para servidores. Possui síntese relativamente simples e é uma habilidade valiosa para desenvolvedores
front-end e full-stack.

Código: 
// Solicita ao usuário que insira seu nome
var nome = prompt("Digite seu nome:");

// Saudação
alert("Olá, " + nome + "! Bem-vindo ao JavaScript!");

--------------------------------------------------------------
ESTRUTURA DE REPETIÇÃO:

print("Try programiz.pro")
for i in range(1, 12):
    print(i)
1
2
3
4
5
6
7
8
9
10
11
> 

ESTRUTURA DE TOMADA DE DECISÃO:

# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
idade = 30
if idade < 18:
    print ("Você é menor de idade.")
elif idade >= 18 and idade< 65:
     print ("Você é adulto.")
else:
    print ("Você é um idoso.")

Você é adulto.


-----------------------------------------------------------------------------------------------------------------------------------------------------


19/03/2024

def bubbleSort(alist):
    for passnum in range(len(alist)-1,0,-1):
        for i in range(passnum):
            if alist[i]>alist[i+1]:
                temp = alist[i]
                alist[i] = alist[i+1]
                alist[i+1] = temp

alist = [54,26,93,17,77,31,44,55,20,2,5,7,9]
bubbleSort(alist)
print(alist)

alist = [54,26,93,17,77,31,44,55,20,2,5,7,9]

def conta_vogais(string): 
    string = string.lower() # para que a comparação não seja sensível a maiuscula/minuscula 
    result = {} 
    vogais = 'aeiou' 
    for i in vogais: 
        if i in string: 
            result[i] = string.count(i) 
    return result 
 
print(conta_vogais('Felipe Elmor'))

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Variáveis para armazenar os números
x = 16
y = 21
z = 37
w = 38

# Variáveis para armazenar a frase e a palavra
frase = "Cachorro melhor que gato."
palavra = "Internacional"

# Calculando a média aritmética
media = (x + y + z + w) / 4

# Calculando o quadrado de um dos números
quadrado = z ** 2

# Calculando o dobro de um dos números
dobro = w * 2

# Contando a quantidade de letras da palavra
quant_letras_palavra = len(palavra)

# Contando a quantidade de espaços em branco da frase
quant_espacos_frase = frase.count(' ')

# Verificando se o primeiro número é maior que o segundo
primeiro_maior = x > y

# Encontrando o maior número
maior = max(x, y, z, w)

# Imprimindo os resultados
print("Média aritmética dos números:", media)
print("Quadrado de um dos números:", quadrado)
print("Dobro de um dos números:", dobro)
print("Quantidade de letras da palavra:", quant_letras_palavra)
print("Quantidade de espaços em branco da frase:", quant_espacos_frase)
print("O primeiro número é maior que o segundo:", primeiro_maior)
print("Maior número entre os quatro números:", maior)



------------------------------------------------

# Problema 1
def imprimir_informacoes(nome, idade, cidade):
    print("Nome:", nome, end=" - ")
    print("Idade:", idade, end=" - ")
    print("Cidade:", cidade, end="!\n")

# Exemplo de uso:
imprimir_informacoes("Alice", 25, "São Paulo")

# Problema 2
def calcular_operacao():
    num1 = float(input("Digite o primeiro número: "))
    num2 = float(input("Digite o segundo número: "))
    operacao = input("Digite a operação desejada (+, -, *, /): ")

    if operacao == '+':
        print("Resultado:", num1 + num2)
    elif operacao == '-':
        print("Resultado:", num1 - num2)
    elif operacao == '*':
        print("Resultado:", num1 * num2)
    elif operacao == '/':
        if num2 != 0:
            print("Resultado:", num1 / num2)
        else:
            print("Erro: Divisão por zero!")
    else:
        print("Operação inválida!")

# Problema 3
def lista_de_compras():
    itens = input("Digite os itens da lista de compras, separados por vírgula: ").split(',')
    for i, item in enumerate(itens, start=1):
        print("Item", i, ":", item.strip())

# Problema 4
def celsius_para_fahrenheit():
    celsius = float(input("Digite a temperatura em graus Celsius: "))
    fahrenheit = (celsius * 9/5) + 32
    print("Temperatura em Fahrenheit:", fahrenheit)

# Problema 5
def digitar_nomes():
    nomes = []
    while True:
        nome = input("Digite um nome (ou 'sair' para terminar): ")
        if nome.lower() == 'sair':
            break
        nomes.append(nome)
    
    print("Nomes digitados:")
    for nome in nomes:
        print(nome)

# Exemplos de uso:
calcular_operacao()
lista_de_compras()
celsius_para_fahrenheit()
digitar_nomes()


